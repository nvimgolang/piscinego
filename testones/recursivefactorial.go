package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

// RecursiveFactorial –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
// –ï—Å–ª–∏ —á–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0
// –ò–Ω–∞—á–µ –µ—Å–ª–∏ –≤–µ—Å—å –º–∏—Ä –Ω–µ –ø–æ–π–º–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, —Ç–æ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –±—É–¥–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ
// —Å–∞–º—ã–º –∂–µ—Å—Ç–æ–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º, –ø–æ—ç—Ç–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É—é –∫–∞–∂–¥—ã–π —à–∞–≥ –∫–∞–∫ –±—É–¥—Ç–æ –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –∂–∏–∑–Ω—å
func RecursiveFactorial(nb int) int {
	// –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
	// –§–∞–∫—Ç–æ—Ä–∏–∞–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–¥–∞–Ω–∏–∏, –∏–Ω–∞—á–µ –≤—Å–µ —É–º—Ä—É—Ç
	if nb < 0 {
		return 0
	}

	// –ë–ê–ó–û–í–´–ô –°–õ–£–ß–ê–ô –†–ï–ö–£–†–°–ò–ò (—Å–ø–∞—Å–∞–µ—Ç –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏ –∏ —Å–º–µ—Ä—Ç–∏):
	// 0! = 1 –∏ 1! = 1 –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
	// –ï—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é –∑–¥–µ—Å—å, –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç stack overflow –∏ –≤—Å–µ —É–º—Ä—É—Ç
	if nb <= 1 {
		return 1
	}

	// –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–ï–†–ï–ü–û–õ–ù–ï–ù–ò–ï:
	// –§–∞–∫—Ç–æ—Ä–∏–∞–ª—ã —Ä–∞—Å—Ç—É—Ç –û–ß–ï–ù–¨ –±—ã—Å—Ç—Ä–æ: 13! = 6,227,020,800
	// –í Go int –º–æ–∂–µ—Ç –±—ã—Ç—å 32-bit (max ~2 –º–ª—Ä–¥) –∏–ª–∏ 64-bit
	// 13! —É–∂–µ –±–æ–ª—å—à–µ 32-bit int, –ø–æ—ç—Ç–æ–º—É –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 12
	// –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ, –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤—Å–µ —É–º—Ä—É—Ç –∂–µ—Å—Ç–æ–∫–æ–π —Å–º–µ—Ä—Ç—å—é
	if nb > 12 {
		return 0
	}

	// –†–ï–ö–£–†–°–ò–í–ù–´–ô –í–´–ó–û–í:
	// nb! = nb √ó (nb-1)!
	// –ö–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ —É–º–µ–Ω—å—à–∞–µ—Ç nb –Ω–∞ 1, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –±–∞–∑–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è
	// –≠—Ç–æ –æ—Å–Ω–æ–≤–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ - —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç —Å–∞–º—É —Å–µ–±—è —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
	// –ï—Å–ª–∏ –ª–æ–≥–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∞, –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞ –∏ –≤—Å–µ —É–º—Ä—É—Ç
	return nb * RecursiveFactorial(nb-1)
}

// demonstrateFactorial –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞
// –ß—Ç–æ–±—ã –ª—é–¥–∏ –ø–æ–Ω–∏–º–∞–ª–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∏–Ω–∞—á–µ –≤—Å–µ —É–º—Ä—É—Ç –æ—Ç –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏—è
func demonstrateFactorial(n int) {
	fmt.Printf("\nüîç –ü–æ—à–∞–≥–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ %d!:\n", n)

	if n < 0 {
		fmt.Println("‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ - —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!")
		return
	}

	if n > 12 {
		fmt.Println("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ - –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ!")
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç–∫—É —Ä–µ–∫—É—Ä—Å–∏–∏
	fmt.Printf("%d! = ", n)
	for i := n; i > 0; i-- {
		fmt.Printf("%d", i)
		if i > 1 {
			fmt.Print(" √ó ")
		}
	}
	fmt.Printf(" = %d\n", RecursiveFactorial(n))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã
	fmt.Println("\nüìû –¶–µ–ø–æ—á–∫–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤:")
	showRecursiveCalls(n, 0)
}

// showRecursiveCalls –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã
// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è, –∏–Ω–∞—á–µ –≤—Å–µ —É–º—Ä—É—Ç –æ—Ç confusion
func showRecursiveCalls(n int, depth int) {
	indent := strings.Repeat("  ", depth)

	if n <= 1 {
		fmt.Printf(
			"%süéØ RecursiveFactorial(%d) ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1 (–±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π)\n",
			indent,
			n,
		)
		return
	}

	fmt.Printf(
		"%süìû RecursiveFactorial(%d) –≤—ã–∑—ã–≤–∞–µ—Ç RecursiveFactorial(%d)\n",
		indent,
		n,
		n-1,
	)
	showRecursiveCalls(n-1, depth+1)
	fmt.Printf(
		"%süì§ RecursiveFactorial(%d) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç %d √ó %d = %d\n",
		indent,
		n,
		n,
		RecursiveFactorial(n-1),
		n*RecursiveFactorial(n-1),
	)
}

// testFactorial —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö
// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∞—Å–∞–µ—Ç –∂–∏–∑–Ω–∏, –±–µ–∑ –Ω–µ–≥–æ –≤—Å–µ —É–º—Ä—É—Ç –æ—Ç –±–∞–≥–æ–≤
func testFactorial() {
	fmt.Println("\nüß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã:")

	testCases := []struct {
		input    int
		expected int
		desc     string
	}{
		{0, 1, "0! –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1"},
		{1, 1, "1! –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1"},
		{4, 24, "4! –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 24"},
		{5, 120, "5! –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 120"},
		{-1, 0, "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 0"},
		{13, 0, "–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 0"},
	}

	for _, tc := range testCases {
		result := RecursiveFactorial(tc.input)
		status := "‚úÖ"
		if result != tc.expected {
			status = "‚ùå"
		}
		fmt.Printf(
			"%s RecursiveFactorial(%d) = %d (%s)\n",
			status,
			tc.input,
			result,
			tc.desc,
		)
	}
}

func main() {
	fmt.Println("üöÄ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞")
	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã —Å—Ä–∞–∑—É
	testFactorial()

	scanner := bufio.NewScanner(os.Stdin)

	for {
		fmt.Println("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		fmt.Println("1. –í—ã—á–∏—Å–ª–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª")
		fmt.Println("2. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ")
		fmt.Println("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
		fmt.Println("4. –í—ã—Ö–æ–¥")
		fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ")

		if !scanner.Scan() {
			break
		}

		choice := strings.TrimSpace(scanner.Text())

		switch choice {
		case "1":
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞: ")
			if scanner.Scan() {
				if num, err := strconv.Atoi(strings.TrimSpace(scanner.Text())); err == nil {
					result := RecursiveFactorial(num)
					fmt.Printf("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: %d! = %d\n", num, result)
				} else {
					fmt.Println("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
				}
			}

		case "2":
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: ")
			if scanner.Scan() {
				if num, err := strconv.Atoi(strings.TrimSpace(scanner.Text())); err == nil {
					demonstrateFactorial(num)
				} else {
					fmt.Println("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
				}
			}

		case "3":
			testFactorial()

		case "4":
			fmt.Println("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			return

		default:
			fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		}
	}
}
